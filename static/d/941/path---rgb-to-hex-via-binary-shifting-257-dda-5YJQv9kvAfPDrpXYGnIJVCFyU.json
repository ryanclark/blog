{"data":{"site":{"siteMetadata":{"title":"ryanclark.me","author":"Ryan Clark"}},"markdownRemark":{"id":"ca7dc397-0eee-5965-b5d0-783faf95067f","excerpt":"A colleague of mine presented me with this code, baffled as to how it works. We know it converts an RGB value to it’s hexadecimal equivalent, but how? It’s…","html":"<p>A colleague of mine presented me with this code, baffled as to how it works.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">rgbToHex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We know it converts an RGB value to it’s hexadecimal equivalent, but how? It’s doing some crazy stuff with binary, but when broken down it’s actually incredibly simple and very clever.</p>\n<h2>Hex Codes</h2>\n<p>Hex codes are six characters long, the first two being red, middle two being green and the last two being blue. Each character is a hexadecimal number.</p>\n<div class=\"scroll\" markdown=\"1\">\n<table>\n<thead>\n<tr>\n<th></th>\n<th>R</th>\n<th>R</th>\n<th>G</th>\n<th>G</th>\n<th>B</th>\n<th>B</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>#</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3>Hexadecimal Numbers</h3>\n<p>A hex value can go from <code class=\"language-text\">0</code> to <code class=\"language-text\">F</code> - a maximum of 16 different values. When putting two together, we can now have a maximum of 256 (16 multiplied by 16) values (<code class=\"language-text\">0</code> through to <code class=\"language-text\">255</code>). We can represent <code class=\"language-text\">0</code> through to <code class=\"language-text\">255</code> in 8 bits.</p>\n<p><em>0 represented in 8 bits</em></p>\n<div class=\"scroll\" markdown=\"1\">\n<table>\n<thead>\n<tr>\n<th>128</th>\n<th>64</th>\n<th>32</th>\n<th>16</th>\n<th>8</th>\n<th>4</th>\n<th>2</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><em>256 represented in 8 bits</em></p>\n<div class=\"scroll\" markdown=\"1\">\n<table>\n<thead>\n<tr>\n<th>128</th>\n<th>64</th>\n<th>32</th>\n<th>16</th>\n<th>8</th>\n<th>4</th>\n<th>2</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>This means that red, green and blue can have 256 different variations each - that’s 16,581,375 colours we can reference in just 6 characters!</p>\n<h2>Double Arrow?</h2>\n<p>If you don’t know about bitwise operators, you might be very confused to see a <code class=\"language-text\">&lt;&lt;</code> in JavaScript. Don’t worry, what it does is very easy to understand.</p>\n<p>The <code class=\"language-text\">&lt;&lt;</code> operator is also known as a left shift. This will shift the value of <code class=\"language-text\">r</code> 16 bits to the left. You can, at a maximum, shift a number 31 bits to the left.</p>\n<h3>Let’s do an example</h3>\n<p>The number one, represented as a decimal, is <code class=\"language-text\">1</code>. Represented as binary (in 17 bits for the sake of consistency), is -</p>\n<div class=\"scroll\" markdown=\"1\">\n<table>\n<thead>\n<tr>\n<th>65536</th>\n<th>32768</th>\n<th>16384</th>\n<th>8192</th>\n<th>4096</th>\n<th>2048</th>\n<th>1024</th>\n<th>512</th>\n<th>256</th>\n<th>128</th>\n<th>64</th>\n<th>32</th>\n<th>16</th>\n<th>8</th>\n<th>4</th>\n<th>2</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>1</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>When we shift <code class=\"language-text\">1</code> 16 bits to the left, we’re adding 16 <code class=\"language-text\">0</code>’s to the right of the one.</p>\n<div class=\"scroll\" markdown=\"1\">\n<table>\n<thead>\n<tr>\n<th>65536</th>\n<th>32768</th>\n<th>16384</th>\n<th>8192</th>\n<th>4096</th>\n<th>2048</th>\n<th>1024</th>\n<th>512</th>\n<th>256</th>\n<th>128</th>\n<th>64</th>\n<th>32</th>\n<th>16</th>\n<th>8</th>\n<th>4</th>\n<th>2</th>\n<th>1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>Which as a decimal, is equal to <code class=\"language-text\">65536</code>.</p>\n<p>That’s all it does! Told you it was simple.</p>\n<h2>Breaking it down</h2>\n<p>We’re going to start with the middle section - the part that deals with converting the red value to hexadecimal.</p>\n<h3>Red</h3>\n<p>The code that does this is <code class=\"language-text\">(r &lt;&lt; 16)</code>. The red value is always first in a hex code, so in order to make room for green and blue, we shift it 16 bits to the left. This gives us the red value in binary, as well as 16 bits on the end - 8 bits for green and 8 bits for blue.</p>\n<p>If we do <code class=\"language-text\">(255 &lt;&lt; 16)</code>, we get the binary</p>\n<p><code class=\"language-text\">111111110000000000000000</code></p>\n<p>Which, when converted to hexadecimal, is equal to <span style=\"width: 10px; height: 10px; display: inline-block; background: #ff0000\"></span> <code class=\"language-text\">ff0000</code>.</p>\n<h3>Green</h3>\n<p>Now that we have converted red to binary and left room for green and blue, we can shift the green value 8 bits to the left. The code that does this is <code class=\"language-text\">(g &lt;&lt; 8)</code>.</p>\n<p>If we shift 255 to the left by 8 bits and represent it in 24 bits, we get this -</p>\n<p><code class=\"language-text\">000000001111111100000000</code></p>\n<p>Which, as hexadecimal, is equal to <span style=\"width: 10px; height: 10px; display: inline-block; background: #00ff00\"></span> <code class=\"language-text\">00ff00</code>.</p>\n<p>If you compare that table and the table in the red section, you can see that they line up perfectly - we can add the two values together without them conflicting.</p>\n<p><em>Take the red value</em></p>\n<p><code class=\"language-text\">111111110000000000000000</code></p>\n<p><em>add the green value</em></p>\n<p><code class=\"language-text\">000000001111111100000000</code></p>\n<p><em>and we get</em></p>\n<p><code class=\"language-text\">111111111111111100000000</code></p>\n<p>When this is converted to hexadecimal, it is <span style=\"width: 10px; height: 10px; display: inline-block; background: #ffff00\"></span> <code class=\"language-text\">ffff00</code> - the correct representation of <code class=\"language-text\">rgb(255, 255, 0)</code> as a hex.</p>\n<h3>Blue</h3>\n<p>We don’t need to shift our blue value to the left, because we are taking up the last 8 bits with it. If you look at the original code, you can see it just does <code class=\"language-text\">+ b</code> at the end. This is because when adding a binary number and a decimal number in JavaScript, the decimal will be converted over to binary before it’s added.</p>\n<p>If our blue value is 255, the binary representation of it is (again, in 24 bits)</p>\n<p><code class=\"language-text\">000000000000000011111111</code></p>\n<p>Which, when added to our red and green value, outputs</p>\n<p><code class=\"language-text\">111111111111111111111111</code></p>\n<p>Which is equal to “ffffff” when converted to a hexadecimal! Most of you will know that this colour is in fact white, or <code class=\"language-text\">rgb(255, 255, 255)</code>.</p>\n<h3>Padding</h3>\n<p>Wait a minute - what’s that <code class=\"language-text\">(1 &lt;&lt; 24)</code> at the start? Why is it needed?</p>\n<p>The decimal number <code class=\"language-text\">1</code> shifted 24 bits to the left provides us with the necessary padding for our RGB values in binary. When you convert a decimal number to a binary number, you aren’t guaranteed 8 bits back - you will get the amount of bits it takes to represent that number (the reason we got 8 bits back for our 255 values is because it takes 8 bits to represent 255 in binary) - if you convert decimal <code class=\"language-text\">0</code> to binary you will only get one bit back - <code class=\"language-text\">0</code>, or if you convert 13 to binary you will get four bits back - <code class=\"language-text\">1101</code>.</p>\n<p>When we shift 1 to the left 24 bits, we get this -</p>\n<p><code class=\"language-text\">1000000000000000000000000</code></p>\n<p>The number 1 followed by 24 bits - 8 bits for each of our colour values.</p>\n<p>This means that whenever we add the results from converting our RGB values to binary, regardless of how many bits the result is, it’ll always add into the correct section of bits because we are shifting the values to the left by either 16, 8 or 0 bits.</p>\n<h2>Binary to Hexadecimal</h2>\n<p>We can convert our binary number into a hexadecimal string by using <code class=\"language-text\">toString</code> and passing it <code class=\"language-text\">16</code> as a value. Alternatively, you can use <code class=\"language-text\">2</code> for binary or <code class=\"language-text\">8</code> for octal.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">rgbToHex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// r = 255, g = 255, b = 255</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"#\"</span> <span class=\"token operator\">+</span>\n    <span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Value: 16777216 or 1000000000000000000000000</span>\n        <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Value: 16711680 or 111111110000000000000000</span>\n            <span class=\"token comment\">// Total: 33488896 or 1111111110000000000000000</span>\n        <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>g <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n            <span class=\"token comment\">// Value: 65280 or 1111111100000000</span>\n            <span class=\"token comment\">// Total: 33554176 or 1111111111111111100000000</span>\n        <span class=\"token operator\">+</span> b\n            <span class=\"token comment\">// Value: 255 or 11111111</span>\n            <span class=\"token comment\">// Total: 33554431 or 1111111111111111111111111</span>\n    <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1ffffff\"</span>\n    <span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"ffffff\"</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">rgbToHex</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// #ffffff</span></code></pre></div>\n<h2>Conclusion</h2>\n<p>As you can see, the code used above is very clever but also very daunting to look at if you don’t understand what’s happening underneath the hood. Hopefully this post makes it all a lot clearer!</p>\n<p>If you have any queries, feel free to contact me on Twitter via <a href=\"https://twitter.com/rynclark\" target=\"_blank\">@rynclark</a></p>\n<p>Credit to the appropriate authors in this <a href=\"http://stackoverflow.com/questions/5623838/rgb-to-hex-and-hex-to-rgb\" target=\"_blank\">stackoverflow post.</a></p>","frontmatter":{"title":"RGB to Hex via Binary Shifting","warning":null,"date":"April 16, 2015"}}},"pageContext":{"slug":"/rgb-to-hex-via-binary-shifting/","previous":{"fields":{"slug":"/getting-started-with-flux/"},"frontmatter":{"title":"Introduction to Facebook's Flux architecture"}},"next":{"fields":{"slug":"/going-native-with-react/"},"frontmatter":{"title":"Going native with React, an introduction"}}}}