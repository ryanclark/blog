{"data":{"site":{"siteMetadata":{"title":"ryanclark.me","author":"Ryan Clark"}},"markdownRemark":{"id":"cb739fb7-2809-5f65-9075-d40e114bc817","excerpt":"AngularJS implements dirty checking for two way data binding on $scope variables. Unlike dynamically setting up setters and getters , which is how Ember.js does…","html":"<p>AngularJS implements dirty checking for two way data binding on $scope variables. Unlike dynamically setting up setters and getters<!--more-->, which is how Ember.js does two way data binding, dirty checking allows Angular to watch for variables that may or may not exist.</p>\n<h3>$scope.$watch</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$scope<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span> watchExp<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> objectEquality <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>To watch when a variable changes, you will use the <code class=\"language-text\">$scope.$watch</code> function. With this you give three arguments, what to watch (<code class=\"language-text\">watchExp</code>), what to do when it’s updated (<code class=\"language-text\">listener</code>), and whether or not you’re checking on a variable or on an object. As we are checking a variable, we can ommit this when we call the function. For example -</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$scope<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Ryan'</span><span class=\"token punctuation\">;</span>\n\n$scope<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> $scope<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$scope.name was updated!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Angular will register your watcher function in the $scope. You can see that these are registered by logging the <code class=\"language-text\">$scope</code> to the console. <a href=\"http://jsfiddle.net/ryanclark/SraRB/2/\" target=\"_blank\">I’ve created a test directive on jsFiddle to demonstrate this.</a></p>\n<p>You’ll notice that the console logs the fact that <code class=\"language-text\">$scope.name</code> is updated - this is because <code class=\"language-text\">$scope.name</code> was previously undefined and we’ve updated it to equal <code class=\"language-text\">Ryan</code>!</p>\n<p>You can also use a string instead of a function in $watch. This will do exactly the same as providing a function. In the Angular source code, if you provide a string, the following code is ran - </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> watchExp <span class=\"token operator\">==</span> <span class=\"token string\">'string'</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">get</span><span class=\"token punctuation\">.</span>constant<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> originalFn <span class=\"token operator\">=</span> watcher<span class=\"token punctuation\">.</span>fn<span class=\"token punctuation\">;</span>\n  watcher<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newVal<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> scope</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">originalFn</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> newVal<span class=\"token punctuation\">,</span> oldVal<span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">arrayRemove</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">,</span> watcher<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This will set our watchExp to a function, in which it will call our listener with the variable that you’ve given the name of.</p>\n<h3>$$watchers</h3>\n<p>The <code class=\"language-text\">$$watchers</code> variable in <code class=\"language-text\">$scope</code> holds all of the watchers that you define. If you look into <code class=\"language-text\">$$watchers</code> in the jsFiddle, you’ll see that is an array of objects.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$$watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n\t<span class=\"token punctuation\">{</span>\n\t\teq<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// whether or not we are checking for objectEquality</span>\n\t\t<span class=\"token function-variable function\">fn</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this is the listener function we've provided</span>\n\t\tlast<span class=\"token punctuation\">:</span> <span class=\"token string\">'Ryan'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the last known value for the variable</span>\n\t\t<span class=\"token function-variable function\">exp</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// this is the watchExp function we provided</span>\n\t\t<span class=\"token function-variable function\">get</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span> <span class=\"token comment\">// Angular's compiled watchExp function</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The <code class=\"language-text\">$watch</code> function returns the <code class=\"language-text\">deregisterWatch</code> function. This means that if we were to assign the initial <code class=\"language-text\">$scope.$watch</code> to a variable, we could just call it to stop watching. <a href=\"http://jsfiddle.net/ryanclark/SraRB/4/\" target=\"_blank\">View this in jsFiddle.</a> Make sure you open and look at the first <code class=\"language-text\">$scope</code> that is logged before clicking on remove watcher!</p>\n<p>However, <a href=\"http://jsfiddle.net/ryanclark/SraRB/5/\" target=\"_blank\">take a look at this.</a> If we were to remove the watcher before the controller function is evaluated, there is no log that we updated the <code class=\"language-text\">$scope.name</code> variable, even though we have - why is this?</p>\n<h3>$scope.$apply</h3>\n<p>Whenever a controller/directive/etc is ran in Angular, internally Angular runs a function called <code class=\"language-text\">$scope.$apply</code>. The <code class=\"language-text\">$apply</code> function will run a function given to it, before finally running the <code class=\"language-text\">$digest</code> function in the rootScope. More on digests later.</p>\n<p>The Angular $apply function looks like this -</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">$apply</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">expr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token function\">beginPhase</span><span class=\"token punctuation\">(</span><span class=\"token string\">'$apply'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$eval</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token function\">$exceptionHandler</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">{</span>\n\t  <span class=\"token function\">clearPhase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t    $rootScope<span class=\"token punctuation\">.</span><span class=\"token function\">$digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t    <span class=\"token function\">$exceptionHandler</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">throw</span> e<span class=\"token punctuation\">;</span>\n\t  <span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>expr</h4>\n<p>The <code class=\"language-text\">expr</code> argument is just a function that you or Angular would pass through when calling <code class=\"language-text\">$scope.$apply</code> - most of the time you won’t even need to use <code class=\"language-text\">$apply</code>, let alone give it a function!</p>\n<p>Let’s look into how <code class=\"language-text\">ng-keydown</code> uses <code class=\"language-text\">$scope.$apply</code>. To register the directive, Angular uses the following code -</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> ngEventDirectives <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste'</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> directiveName <span class=\"token operator\">=</span> <span class=\"token function\">directiveNormalize</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ng-'</span> <span class=\"token operator\">+</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ngEventDirectives<span class=\"token punctuation\">[</span>directiveName<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'$parse'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$parse</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function-variable function\">compile</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">$element<span class=\"token punctuation\">,</span> attr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">var</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">$parse</span><span class=\"token punctuation\">(</span>attr<span class=\"token punctuation\">[</span>directiveName<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token function\">ngEventHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">scope<span class=\"token punctuation\">,</span> element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            element<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token function\">lowercase</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              scope<span class=\"token punctuation\">.</span><span class=\"token function\">$apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>scope<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>$event<span class=\"token punctuation\">:</span>event<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>What this does is loop through the different types of events that can be fired and create a new directive called ng(EventNameHere). In the compile function of the directive, it registers an event handler on the element, with the event being the directives name respectively. When that event is fired, Angular runs <code class=\"language-text\">scope.$apply</code>, giving it a function to run as well. </p>\n<h3>This is only one way data binding?</h3>\n<p>This will update the $scope value with the elements value - this is only one way data binding. This is because we’ve called <code class=\"language-text\">ng-keydown</code>, only alerting us when the keydown event is fired, and giving us the new value!</p>\n<h3>But we want two way data binding!</h3>\n<p>Let’s take a look at <code class=\"language-text\">ng-model</code>. When you use <code class=\"language-text\">ng-model</code>, this allows you to do two way data binding - exactly what we want. <code class=\"language-text\">ng-model</code> uses both <code class=\"language-text\">$scope.$watch</code> (view to model) and <code class=\"language-text\">$scope.$apply</code> (model to view) to offer this.</p>\n<p><code class=\"language-text\">ng-model</code> will attach the event handler directive (such as <code class=\"language-text\">keydown</code>) to the input you’ve applied it to - this is where <code class=\"language-text\">$scope.$apply</code> is called! <code class=\"language-text\">$scope.$watch</code> is called in the directive’s controller. You can see this here -</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">$scope<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">ngModelWatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token function\">ngModelGet</span><span class=\"token punctuation\">(</span>$scope<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// if scope model value and ngModel value are out of sync</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctrl<span class=\"token punctuation\">.</span>$modelValue <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token keyword\">var</span> formatters <span class=\"token operator\">=</span> ctrl<span class=\"token punctuation\">.</span>$formatters<span class=\"token punctuation\">,</span>\n\t\t\tidx <span class=\"token operator\">=</span> formatters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n\t\tctrl<span class=\"token punctuation\">.</span>$modelValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>idx<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tvalue <span class=\"token operator\">=</span> formatters<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ctrl<span class=\"token punctuation\">.</span>$viewValue <span class=\"token operator\">!==</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\tctrl<span class=\"token punctuation\">.</span>$viewValue <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    \t\tctrl<span class=\"token punctuation\">.</span><span class=\"token function\">$render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>When you call <code class=\"language-text\">$scope.$watch</code> with only one argument, the function you provide it will be called regardless of what updates - perfect! The function that is given in <code class=\"language-text\">ng-model</code> checks if the model and view are out of sync, and if it is, it will update the model with its new value. The function returns the new value, so when it is ran in the <code class=\"language-text\">$digest</code> function, we will know what the new value is!</p>\n<h3>So why does our listener not fire?</h3>\n<p>If we look back at the jsFiddle where we deregister the <code class=\"language-text\">$scope.$watch</code> function in the same function as we define it, we can now understand why we don’t get notified about us updating <code class=\"language-text\">$scope.name</code> even though we did.</p>\n<p>As mentioned earlier, Angular runs <code class=\"language-text\">$scope.$apply</code> on every directive’s controller function. If we look into the <code class=\"language-text\">$scope.$apply</code> function, it only runs the <code class=\"language-text\">$digest</code> after the directive’s controller function has been evaluated - meaning that the <code class=\"language-text\">$scope.$watch</code> function never actually gets a chance to be called, as we’ve deregisted it before it could’ve been ran! But how is it ran? </p>\n<h3>$digest</h3>\n<p>The <code class=\"language-text\">$digest</code> function is called on the <code class=\"language-text\">$rootScope</code> by <code class=\"language-text\">$scope.$apply</code>. This will run the digest cycle on the $rootScope and will then traverse down the scopes and run the digest cycle on that. In simple terms, the digest cycle will fire all of our <code class=\"language-text\">watchExp</code> functions in the <code class=\"language-text\">$$watchers</code> variable, compare them against the last known value, and if they’re different, fire the listener!</p>\n<p>When the digest cycle runs, it loops through the watchers and then loops again, whilst the cycle is considered “dirty”. The cycle is considered dirty when the <code class=\"language-text\">watchExp</code> and last known value aren’t equal to each other. Ideally this will run once, but if it runs more than 10 times you will get an error.</p>\n<p>So when <code class=\"language-text\">$scope.$apply</code> is ran, <code class=\"language-text\">$digest</code> is ran, it will then loop through the <code class=\"language-text\">$$watchers</code> and fire any listener event if the <code class=\"language-text\">watchExp</code> does not equal the last known value. <code class=\"language-text\">$scope.$apply</code> is ran by Angular on anything that could possibly contain a model value changing. This is why when you update the <code class=\"language-text\">$scope</code> outside of Angular, for instance in a <code class=\"language-text\">setTimeout</code> function, you need to run <code class=\"language-text\">$scope.$apply();</code> in order to have Angular notice that the scope has been updated!</p>\n<h3>Let’s create our own</h3>\n<p>We’ll create a small, basic version of dirty checking that we can use. Angular’s dirty checking is a bit more advanced, offering async queues and some other neat things.</p>\n<h4>Setup our scope</h4>\n<p>Scope will just be a function, containing any data that we wish to store in it. We’ll extend the prototype object on the function to replicate <code class=\"language-text\">$digest</code> and <code class=\"language-text\">$watch</code>. We don’t need <code class=\"language-text\">$apply</code> as we’ll be won’t need to evaluate any functions in the context of the Scope - we’ll just simply use <code class=\"language-text\">$digest</code>. Our Scope will look like this - </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Scope</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$watch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$digest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Our <code class=\"language-text\">$watch</code> function needs to accept two parameters, <code class=\"language-text\">watchExp</code> and <code class=\"language-text\">listener</code>. When <code class=\"language-text\">$watch</code> is called, we’ll push these into the <code class=\"language-text\">$$watcher</code> value we’ve set in <code class=\"language-text\">Scope</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Scope</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$watch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">watchExp<span class=\"token punctuation\">,</span> listener</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n\t\twatchExp<span class=\"token punctuation\">:</span> watchExp<span class=\"token punctuation\">,</span>\n\t\tlistener<span class=\"token punctuation\">:</span> listener <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$digest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You’ll notice that I’ve set <code class=\"language-text\">listener</code> to an empty function if there is no <code class=\"language-text\">listener</code> provided - this way we can register a <code class=\"language-text\">$watch</code> for all variables!</p>\n<p>Next we will work on the <code class=\"language-text\">$digest</code>. We need to check if the old value is equal to the new value, and fire the listener if it isn’t. We will then loop until they are equal to each other. This is where the <code class=\"language-text\">dirty</code> variable comes in - whether or not the values are equal to each other!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Scope</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$watch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">watchExp<span class=\"token punctuation\">,</span> listener</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n\t\twatchExp<span class=\"token punctuation\">:</span> watchExp<span class=\"token punctuation\">,</span>\n\t\tlistener<span class=\"token punctuation\">:</span> listener <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$digest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> dirty<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n\t\t\tdirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">var</span> newValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">watchExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\toldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oldValue <span class=\"token operator\">!==</span> newValue <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tdirty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next, we need to create a new instance of our scope. We’ll assign this to <code class=\"language-text\">$scope</code>. We can then register a watch function, and <code class=\"language-text\">$digest</code> it after we update it!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Scope</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$watch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">watchExp<span class=\"token punctuation\">,</span> listener</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n\t\twatchExp<span class=\"token punctuation\">:</span> watchExp<span class=\"token punctuation\">,</span>\n\t\tlistener<span class=\"token punctuation\">:</span> listener <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$digest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> dirty<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n\t\t\tdirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">var</span> newValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">watchExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\toldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oldValue <span class=\"token operator\">!==</span> newValue <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tdirty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">var</span> $scope <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n$scope<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Ryan'</span><span class=\"token punctuation\">;</span>\n\n$scope<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> $scope<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n$scope<span class=\"token punctuation\">.</span><span class=\"token function\">$digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Success - we have dirty checking (in it’s most basic form) implemented! <a href=\"http://jsfiddle.net/ryanclark/PVQts/\" target=\"_blank\">Check out the jsFiddle</a> to mess around with what we’ve made. If you look at the console, you’ll notice it logs</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Ryan <span class=\"token keyword\">undefined</span></code></pre></div>\n<p>Which is the exact behaviour we want - <code class=\"language-text\">$scope.name</code> was previously undefined and we’ve set it to Ryan - result!</p>\n<p>Let’s attach our <code class=\"language-text\">$digest</code> function to a <code class=\"language-text\">keyup</code> event on an input. That way we don’t have to call it ourselves. This means we can have two way data binding too!</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">Scope</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\t\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$watch</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">watchExp<span class=\"token punctuation\">,</span> listener</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">{</span>\n\t\twatchExp<span class=\"token punctuation\">:</span> watchExp<span class=\"token punctuation\">,</span>\n\t\tlistener<span class=\"token punctuation\">:</span> listener <span class=\"token operator\">||</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">Scope</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">$digest</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">var</span> dirty<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n\t\t\tdirty <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t<span class=\"token keyword\">var</span> newValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">watchExp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\toldValue <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">;</span>\n\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> oldValue <span class=\"token operator\">!==</span> newValue <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">listener</span><span class=\"token punctuation\">(</span>newValue<span class=\"token punctuation\">,</span> oldValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\tdirty <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n\n\t\t\t\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$$watchers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>last <span class=\"token operator\">=</span> newValue<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>dirty<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n<span class=\"token keyword\">var</span> $scope <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n$scope<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Ryan'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> element <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'input'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nelement<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onkeyup</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t$scope<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> element<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n\n\t$scope<span class=\"token punctuation\">.</span><span class=\"token function\">$digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n$scope<span class=\"token punctuation\">.</span><span class=\"token function\">$watch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> $scope<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">newValue<span class=\"token punctuation\">,</span> oldValue</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Input value updated - it is now '</span> <span class=\"token operator\">+</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    element<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> $scope<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">updateScopeValue</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateScopeValue</span><span class=\"token punctuation\">(</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    $scope<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">;</span>\n    $scope<span class=\"token punctuation\">.</span><span class=\"token function\">$digest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Perfect - using this approach we can now update the input’s value and it will be reflected in <code class=\"language-text\">$scope.name</code>, as well as call <code class=\"language-text\">updateScopeValue</code> and have the input’s value reflect that! <a href=\"http://jsfiddle.net/ryanclark/S3unb/1/\" target=\"_blank\">You can play around with this here.</a></p>","frontmatter":{"title":"How AngularJS implements dirty checking","warning":"Angular constantly update the digest function so this won't match the source, but the general idea is still the same","date":"July 14, 2014"}}},"pageContext":{"slug":"/how-angularjs-implements-dirty-checking/","previous":null,"next":{"fields":{"slug":"/getting-started-with-react/"},"frontmatter":{"title":"Getting started with React"}}}}